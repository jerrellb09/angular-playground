{
    "pipes": [],
    "interfaces": [
        {
            "name": "Bill",
            "id": "interface-Bill-3eaf36899b9d321e7121d9824091c511",
            "file": "src/app/bills-due/pages/bills-management/bills-management.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnChanges, OnInit } from '@angular/core';\nimport { BillsDueService } from '../../bills-due.service';\n\nexport interface Bill {\n  name?: string;\n  dateDue?: Date;\n  deleted?: boolean;\n  temporary?: string;\n}\n\n@Component({\n  selector: 'app-bills-management',\n  templateUrl: './bills-management.component.html',\n  styleUrls: ['./bills-management.component.css'],\n})\nexport class BillsManagementComponent implements OnInit, OnChanges {\n  //@ViewChildren('bill') addBillComponents: QueryList<AddBillComponent>\n  public bills: Bill[] = [];\n\n  constructor(private billsService: BillsDueService) {}\n\n  ngOnInit() {\n    this.bills = [];\n  }\n\n  ngOnChanges() {\n    this.billsService.billsList.subscribe(\n      (bills) => (this.bills = bills ?? [])\n    );\n  }\n\n  billAdded(event: Bill) {\n    this.bills.push(event);\n    this.billsService.billsList.next(this.bills);\n    console.log('Here are your bills', this.bills);\n  }\n\n  removeBill(billRemoved: Bill) {\n    const billToRemove = this.bills?.find((bill) => {\n      bill.name == billRemoved.name;\n    });\n\n    //billToRemove.deleted = true;\n\n    if (billToRemove) console.log('bill to remove', this.bills);\n  }\n}\n",
            "properties": [
                {
                    "name": "dateDue",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "deleted",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "temporary",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Film",
            "id": "interface-Film-d560ced00f6d0318c86651bf9ee17f3d",
            "file": "src/app/films/models/film.ts",
            "type": "interface",
            "sourceCode": "export interface Film {\r\n  description?: string;\r\n  director?: string;\r\n  id?: string;\r\n  locations?: any[];\r\n  original_title?: string;\r\n  original_title_romanised?: string;\r\n  people?: any[];\r\n  producer?: string;\r\n  release_date?: string;\r\n  rt_score?: string;\r\n  running_time?: string;\r\n  species?: any[];\r\n  title?: string;\r\n  vehicles?: any[];\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "director",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "locations",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "original_title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "original_title_romanised",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "people",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "producer",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "release_date",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rt_score",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "running_time",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "species",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "vehicles",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "filmsWithFavoriteCount",
            "id": "interface-filmsWithFavoriteCount-0e2f46dcee278075c5a63f711648f80e",
            "file": "src/app/films/films-list/films-list.component.ts",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DialogComponent } from '../../shared/dialog/dialog.component';\nimport { FilmsService } from '../films-service.service';\nimport { Film } from '../models/film';\n\nexport interface filmsWithFavoriteCount extends Film {\n  added?: boolean;\n  hidden?: boolean;\n}\n\n@Component({\n  selector: 'app-films-list',\n  templateUrl: './films-list.component.html',\n  styleUrls: ['./films-list.component.css'],\n})\nexport class FilmsListComponent implements OnInit {\n  //@ViewChild('movieInfo') movieInfo: ElementRef;\n  // @ViewChild('movie') movie: ElementRef;\n  // @ViewChild('movieIn') movieInfo: ElementRef;\n  films: Film[] = [];\n  favoriteFilmsList: filmsWithFavoriteCount[] = [];\n  favoritesCount = 0;\n  durationInSeconds = 5;\n  simple: any;\n  hidden = true;\n\n  constructor(\n    private http: HttpClient,\n    private filmsService: FilmsService,\n    private snackBar: MatSnackBar,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private dialog: MatDialog\n  ) {}\n\n  ngOnInit() {\n    this.filmsService.GetFilms().then((res: any) => {\n      this.films = [...res];\n      this.filmsService.filmsWithFavoriteCount.next(\n        this.films.map((x) => {\n          return { ...x, added: false, hidden: true } as filmsWithFavoriteCount;\n        })\n      );\n\n      this.favoriteFilmsList = this.filmsService.filmsWithFavoriteCount.value;\n\n      console.log(this.favoriteFilmsList);\n    });\n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message + ' was added');\n  }\n\n  addToFavorites(id: string) {\n    const filmAdded = this.favoriteFilmsList.find((x) => x.id == id);\n    //filmAdded.added = true;\n    this.favoritesCount += 1;\n  }\n\n  removeFromFavorites(id: string) {\n    const filmAdded = this.favoriteFilmsList.find((x) => x.id == id);\n    //filmAdded.added = false;\n    this.favoritesCount -= 1;\n  }\n\n  showMovieInfo(id: string): void {\n    const filmHovered = this.favoriteFilmsList.find((x) => x.id == id);\n\n    // if (filmHovered.hidden) {\n    //   filmHovered.hidden = false;\n    // } else {\n    //   filmHovered.hidden = true;\n    // }\n  }\n\n  hideMovieInfo(id: string) {\n    const filmHovered = this.favoriteFilmsList.find((x) => x.id == id);\n    //filmHovered.hidden = true;\n  }\n\n  checkOut() {\n    this.dialog.open(DialogComponent, { data: '400px' });\n  }\n}\n",
            "properties": [
                {
                    "name": "added",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Film"
        },
        {
            "name": "Person",
            "id": "interface-Person-4bce8d1a5f37bd1ce22d426b24b839bf",
            "file": "src/app/person/person.ts",
            "type": "interface",
            "sourceCode": "export interface Person {\r\n  firstName?: string;\r\n  lastName?: string;\r\n  age?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "age",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BillsDueService",
            "id": "injectable-BillsDueService-46b86a7e02e7fe1f38f06af66fb817c9",
            "file": "src/app/bills-due/bills-due.service.ts",
            "properties": [
                {
                    "name": "billsList",
                    "defaultValue": "new BehaviorSubject<Bill[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Bill } from './pages/bills-management/bills-management.component';\n\n@Injectable()\nexport class BillsDueService {\n  public billsList = new BehaviorSubject<Bill[]>([]);\n\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "FilmsService",
            "id": "injectable-FilmsService-475c989155b843a3eca71a96094a24d5",
            "file": "src/app/films/films-service.service.ts",
            "properties": [
                {
                    "name": "filmsWithFavoriteCount",
                    "defaultValue": "new BehaviorSubject<any[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "GetFilms",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { Film } from \"./models/film\";\n\n@Injectable()\nexport class FilmsService {\n  public filmsWithFavoriteCount = new BehaviorSubject<any[]>([]);\n\n  constructor(private http: HttpClient) {}\n\n  public async GetFilms() {\n    return this.http.get(\"https://ghibliapi.herokuapp.com/films\").toPromise();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PersonService",
            "id": "injectable-PersonService-808ad588aeb120a05a0c7536666855c1",
            "file": "src/app/person/person.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPeopleObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Person[]>",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "getPeoplePromise",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Person[]>",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Person } from './person';\n\nconst people: Person[] = [\n  {\n    firstName: 'john',\n    lastName: 'doe',\n    age: 50,\n  },\n  {\n    firstName: 'Papa',\n    lastName: 'John',\n    age: 70,\n  },\n];\n\n@Injectable()\nexport class PersonService {\n  constructor() {}\n\n  getPeoplePromise(): Promise<Person[]> {\n    return new Promise((resolve) => {\n      return resolve(people);\n    });\n  }\n\n  getPeopleObservable(): Observable<Person[]> {\n    return of(people);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddBillComponent",
            "id": "component-AddBillComponent-46b7514d219732eddf3f0a02a1309dc9",
            "file": "src/app/bills-due/components/add-bill/add-bill.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-bill",
            "styleUrls": [
                "./add-bill.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-bill.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bills",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "Bill[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "billAdded",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    name: [undefined],\n    dateDue: [undefined],\n    deleted: [false],\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Bill } from '../../pages/bills-management/bills-management.component';\n\n@Component({\n  selector: 'app-add-bill',\n  templateUrl: './add-bill.component.html',\n  styleUrls: ['./add-bill.component.css'],\n})\nexport class AddBillComponent implements OnInit {\n  @Input() bills: Bill[] = [];\n  @Output() billAdded = new EventEmitter<any>();\n\n  public form: FormGroup = this.fb.group({\n    name: [undefined],\n    dateDue: [undefined],\n    deleted: [false],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {}\n\n  onSubmit() {\n    if (this.form) {\n      // let bill = {\n      //   name: this.form.get('name').value,\n      //   dateDue: this.form.get('dateDue').value,\n      //   deleted: false\n      //   }\n      //   console.log(this.form.value);\n      //   this.billAdded.emit(bill);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-bill.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>add-bill works!</p>\n<form [formGroup]=\"this.form\" (ngSubmit)=\"onSubmit()\">\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Name of Bill Due:</mat-label>\n    <input matInput formControlName=\"name\">\n  </mat-form-field>\n\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Choose a date</mat-label>\n    <input matInput [matDatepicker]=\"picker\" formControlName=\"dateDue\">\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker #picker></mat-datepicker>\n  </mat-form-field>\n  <button type=\"submit\">Add Bill</button>\n</form>\n"
        },
        {
            "name": "AddNewPersonComponent",
            "id": "component-AddNewPersonComponent-c452d3cc95e4f434d0de0f6449fb9763",
            "file": "src/app/person/add-new-person/add-new-person.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-new-person",
            "styleUrls": [
                "./add-new-person.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-new-person.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "firstName",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastName",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "people",
                    "defaultValue": "[]",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "loadPeople",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Person } from '../person';\nimport { PersonService } from '../person.service';\n\n@Component({\n  selector: 'app-add-new-person',\n  templateUrl: './add-new-person.component.html',\n  styleUrls: ['./add-new-person.component.css'],\n})\nexport class AddNewPersonComponent implements OnInit, OnDestroy {\n  public form = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n  public firstName: string = '';\n  public lastName: string = '';\n  public people: Person[] = [];\n  // public people$: Observable<Person[]> = [];\n  // public time$: Observable<string>;\n  // public counter$: Observable<number>;\n\n  constructor(\n    private fb: FormBuilder,\n    private personService: PersonService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.personService\n      .getPeoplePromise()\n      .then((people) => {\n        this.people = people;\n        console.log('the people as a promise', this.people);\n      })\n      .catch((err) => console.log);\n\n    // this.time$ = new Observable<string>(observer => {\n    //   setInterval(() => observer.next(new Date().toString()), 1000);\n    // });\n\n    // this.time$.pipe(take(1)).subscribe(console.log);\n\n    // //this.subscription = this.time.subscribe();\n\n    // this.personService.getPeopleObservable().subscribe(people => {\n    //   console.log(\"the people as an observable\", people);\n    // });\n  }\n\n  add(): void {\n    this.form = this.fb.group({\n      firstName: this.form.get('firstName'),\n      lastName: this.form.get('lastName'),\n    });\n\n    console.log(this.form.value);\n  }\n\n  goBack() {\n    this.router.navigate(['person']);\n  }\n\n  async loadPeople() {\n    // this.people$.subscribe(people => {\n    //   this.people = people;\n    // });\n  }\n\n  ngOnDestroy() {\n    //this.subscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-new-person.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "personService",
                        "type": "PersonService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p>add-new-person works!</p>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e06d7c17806d6b5346123f9bb833641f",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "my-app",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name",
                    "defaultValue": "'Angular ' + VERSION.major",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "goToBillsDue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "goToFilmsListPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, VERSION } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  constructor(private router: Router) {}\n  name = 'Angular ' + VERSION.major;\n\n  goToFilmsListPage() {\n    this.router.navigate(['/films/films-list']);\n  }\n\n  goToBillsDue() {\n    this.router.navigate(['/bills-due']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\r\n  font-family: Lato;\r\n}\r\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p>Start editing to see some magic happen :)</p>\n\n<button (click)=\"goToFilmsListPage()\">Go To Films</button>\n<button (click)=\"goToBillsDue()\">Go To Bills Due</button>\n\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "BillsDueComponent",
            "id": "component-BillsDueComponent-f91bacaba53e91f0e7e52b403f18225a",
            "file": "src/app/bills-due/bills-due.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bills-due",
            "styleUrls": [
                "./bills-due.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bills-due.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bills-due',\n  templateUrl: './bills-due.component.html',\n  styleUrls: ['./bills-due.component.css'],\n})\nexport class BillsDueComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bills-due.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>bills-due works!</p>\n"
        },
        {
            "name": "BillsListComponent",
            "id": "component-BillsListComponent-fa15a258098d9d5f9f2811db7adfc924",
            "file": "src/app/bills-due/components/bills-list/bills-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bills-list",
            "styleUrls": [
                "./bills-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bills-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bills",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "Bill[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeBill",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "removeBillDue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Bill"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Bill",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Bill } from '../../pages/bills-management/bills-management.component';\n\n@Component({\n  selector: 'app-bills-list',\n  templateUrl: './bills-list.component.html',\n  styleUrls: ['./bills-list.component.css'],\n})\nexport class BillsListComponent implements OnInit {\n  @Input() bills: Bill[] = [];\n  @Output() removeBill = new EventEmitter<any>();\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  removeBillDue(event: Bill) {\n    console.log('event emitted', event);\n    this.removeBill.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bills-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"row\" *ngIf=\"this.bills.length > 0\">\n  <div *ngFor=\"let bill of bills\">\n    <div *ngIf=\"!bill.deleted\"></div>\n    <p>Bill Name: {{bill.name}}</p>\n    <p>Bill Due Date: {{bill.dateDue | date: 'shortDate'}}</p>\n  <div>\n    <button (click)=\"removeBillDue(bill)\">X</button>\n  </div>\n </div>\n</div>\n"
        },
        {
            "name": "BillsManagementComponent",
            "id": "component-BillsManagementComponent-3eaf36899b9d321e7121d9824091c511",
            "file": "src/app/bills-due/pages/bills-management/bills-management.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bills-management",
            "styleUrls": [
                "./bills-management.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bills-management.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bills",
                    "defaultValue": "[]",
                    "type": "Bill[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "billAdded",
                    "args": [
                        {
                            "name": "event",
                            "type": "Bill"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Bill",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "removeBill",
                    "args": [
                        {
                            "name": "billRemoved",
                            "type": "Bill"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "billRemoved",
                            "type": "Bill",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnChanges, OnInit } from '@angular/core';\nimport { BillsDueService } from '../../bills-due.service';\n\nexport interface Bill {\n  name?: string;\n  dateDue?: Date;\n  deleted?: boolean;\n  temporary?: string;\n}\n\n@Component({\n  selector: 'app-bills-management',\n  templateUrl: './bills-management.component.html',\n  styleUrls: ['./bills-management.component.css'],\n})\nexport class BillsManagementComponent implements OnInit, OnChanges {\n  //@ViewChildren('bill') addBillComponents: QueryList<AddBillComponent>\n  public bills: Bill[] = [];\n\n  constructor(private billsService: BillsDueService) {}\n\n  ngOnInit() {\n    this.bills = [];\n  }\n\n  ngOnChanges() {\n    this.billsService.billsList.subscribe(\n      (bills) => (this.bills = bills ?? [])\n    );\n  }\n\n  billAdded(event: Bill) {\n    this.bills.push(event);\n    this.billsService.billsList.next(this.bills);\n    console.log('Here are your bills', this.bills);\n  }\n\n  removeBill(billRemoved: Bill) {\n    const billToRemove = this.bills?.find((bill) => {\n      bill.name == billRemoved.name;\n    });\n\n    //billToRemove.deleted = true;\n\n    if (billToRemove) console.log('bill to remove', this.bills);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bills-management.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "billsService",
                        "type": "BillsDueService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "billsService",
                        "type": "BillsDueService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div>\n  <h2>Bills Management</h2>\n</div>\n\n<app-add-bill [bills]=\"this.bills\" (billAdded)=\"billAdded($event)\"></app-add-bill>\n\n\n<app-bills-list [bills]=\"this.bills\" (removeBill)=\"removeBill($event)\"></app-bills-list>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-9d6536d31e6243ebb0cfa70c73d6003e",
            "file": "src/app/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart",
            "styleUrls": [
                "./cart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css'],\n})\nexport class CartComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>cart works!</p>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-a315f44ba74eca04d3791f9cebb2ba53",
            "file": "src/app/shared/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [
                "./dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.css'],\n})\nexport class DialogComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>dialog works!</p>\n"
        },
        {
            "name": "FilmsComponent",
            "id": "component-FilmsComponent-0a4292f0e287a7e286d2bb2b219eb7f6",
            "file": "src/app/films/films.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-films",
            "styleUrls": [
                "./films.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./films.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-films',\n  templateUrl: './films.component.html',\n  styleUrls: ['./films.component.css'],\n})\nexport class FilmsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./films.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>films works!</p>\n\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "FilmsListComponent",
            "id": "component-FilmsListComponent-0e2f46dcee278075c5a63f711648f80e",
            "file": "src/app/films/films-list/films-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-films-list",
            "styleUrls": [
                "./films-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./films-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "durationInSeconds",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "favoriteFilmsList",
                    "defaultValue": "[]",
                    "type": "filmsWithFavoriteCount[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "favoritesCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "films",
                    "defaultValue": "[]",
                    "type": "Film[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hidden",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "simple",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addToFavorites",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "hideMovieInfo",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFromFavorites",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMovieInfo",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DialogComponent } from '../../shared/dialog/dialog.component';\nimport { FilmsService } from '../films-service.service';\nimport { Film } from '../models/film';\n\nexport interface filmsWithFavoriteCount extends Film {\n  added?: boolean;\n  hidden?: boolean;\n}\n\n@Component({\n  selector: 'app-films-list',\n  templateUrl: './films-list.component.html',\n  styleUrls: ['./films-list.component.css'],\n})\nexport class FilmsListComponent implements OnInit {\n  //@ViewChild('movieInfo') movieInfo: ElementRef;\n  // @ViewChild('movie') movie: ElementRef;\n  // @ViewChild('movieIn') movieInfo: ElementRef;\n  films: Film[] = [];\n  favoriteFilmsList: filmsWithFavoriteCount[] = [];\n  favoritesCount = 0;\n  durationInSeconds = 5;\n  simple: any;\n  hidden = true;\n\n  constructor(\n    private http: HttpClient,\n    private filmsService: FilmsService,\n    private snackBar: MatSnackBar,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private dialog: MatDialog\n  ) {}\n\n  ngOnInit() {\n    this.filmsService.GetFilms().then((res: any) => {\n      this.films = [...res];\n      this.filmsService.filmsWithFavoriteCount.next(\n        this.films.map((x) => {\n          return { ...x, added: false, hidden: true } as filmsWithFavoriteCount;\n        })\n      );\n\n      this.favoriteFilmsList = this.filmsService.filmsWithFavoriteCount.value;\n\n      console.log(this.favoriteFilmsList);\n    });\n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message + ' was added');\n  }\n\n  addToFavorites(id: string) {\n    const filmAdded = this.favoriteFilmsList.find((x) => x.id == id);\n    //filmAdded.added = true;\n    this.favoritesCount += 1;\n  }\n\n  removeFromFavorites(id: string) {\n    const filmAdded = this.favoriteFilmsList.find((x) => x.id == id);\n    //filmAdded.added = false;\n    this.favoritesCount -= 1;\n  }\n\n  showMovieInfo(id: string): void {\n    const filmHovered = this.favoriteFilmsList.find((x) => x.id == id);\n\n    // if (filmHovered.hidden) {\n    //   filmHovered.hidden = false;\n    // } else {\n    //   filmHovered.hidden = true;\n    // }\n  }\n\n  hideMovieInfo(id: string) {\n    const filmHovered = this.favoriteFilmsList.find((x) => x.id == id);\n    //filmHovered.hidden = true;\n  }\n\n  checkOut() {\n    this.dialog.open(DialogComponent, { data: '400px' });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".movie-info-box {\r\n  height: 100px;\r\n  width: 200px;\r\n  z-index: 999;\r\n  background-color: aqua;\r\n  position: relative;\r\n}\r\n\r\n.wrapper-movie-info {\r\n}\r\n\r\n.remove-button {\r\n  color: red;\r\n}\r\n\r\nspan:hover {\r\n  text-decoration: underline;\r\n  color: blue;\r\n}\r\n\r\nbutton:hover {\r\n  transform: 2;\r\n}\r\n",
                    "styleUrl": "./films-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "filmsService",
                        "type": "FilmsService"
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filmsService",
                        "type": "FilmsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div *ngFor=\"let film of favoriteFilmsList\" fxlayout=\"row\">\n  <div fxFlex=\"50\">\n    <button mat-stroked-button\n    color=\"red\"\n      *ngIf=\"!film.added\"\n      (click)=\"addToFavorites(film.id)\"\n      (click)=\"openSnackBar(film.title)\"\n    >\n      Add to favorites\n    </button>\n    <span\n      (mouseenter)=\"showMovieInfo(film.id)\"\n      (mouseleave)=\"hideMovieInfo(film.id)\"\n      >{{film.title}}</span\n    >\n    <button\n      *ngIf=\"film.added\"\n      class=\"remove-button\"\n      (click)=\"removeFromFavorites(film.id)\"\n    >\n      X\n    </button>\n  </div>\n\n  <div fxFlex=\"50\" class=\"wrapper-movie-info\" #movie>\n    <div>\n      <aside class=\"movie-info-box\" #movieIn *ngIf=\"!film.hidden\">\n        Director: {{film.director}}\n      </aside>\n    </div>\n  </div>\n</div>\n\n<div>\n  {{this.favoritesCount}}\n  <p>\n    <button (click)=\"checkOut()\">Checkout</button>\n  </p>\n</div> -->\n\n<p>does this thing even work</p>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PersonComponent",
            "id": "component-PersonComponent-d78a301f14fe03c7695ccc760a2d324c",
            "file": "src/app/person/person.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person",
            "styleUrls": [
                "./person.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./person.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addNewPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-person',\n  templateUrl: './person.component.html',\n  styleUrls: ['./person.component.css'],\n})\nexport class PersonComponent implements OnInit {\n  constructor(private router: Router) {}\n\n  ngOnInit() {}\n\n  addNewPerson(): void {\n    this.router.navigate(['add-new-person']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./person.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>this is the person landing page</div>\n\n<button (click)=\"addNewPerson()\">Add new person</button>\n\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ShoppingCartComponent",
            "id": "component-ShoppingCartComponent-d0371240410afb05da5d9f844e350d57",
            "file": "src/app/cart/shopping-cart/shopping-cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-cart",
            "styleUrls": [
                "./shopping-cart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-shopping-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.css'],\n})\nexport class ShoppingCartComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-cart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>shopping-cart works!</p>\n"
        },
        {
            "name": "TodoComponent",
            "id": "component-TodoComponent-5e3fbceb5f0d221ecb8c7dceaf914bb0",
            "file": "src/app/todo/todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo",
            "styleUrls": [
                "./todo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.css'],\n})\nexport class TodoComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./todo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>todo works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PersonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BillsDueModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BillsDueService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddBillComponent"
                        },
                        {
                            "name": "BillsListComponent"
                        },
                        {
                            "name": "BillsManagementComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BillsDueRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BillsDueRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FilmsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FilmsListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FilmsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FilmsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PersonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PersonService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddNewPersonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PersonRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PersonRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingCartComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "people",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/person/person.service.ts",
                "type": "Person[]",
                "defaultValue": "[\n  {\n    firstName: 'john',\n    lastName: 'doe',\n    age: 50,\n  },\n  {\n    firstName: 'Papa',\n    lastName: 'John',\n    age: 70,\n  },\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/person/person.service.ts": [
                {
                    "name": "people",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/person/person.service.ts",
                    "type": "Person[]",
                    "defaultValue": "[\n  {\n    firstName: 'john',\n    lastName: 'doe',\n    age: 50,\n  },\n  {\n    firstName: 'Papa',\n    lastName: 'John',\n    age: 70,\n  },\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/person/person-routing.module.ts",
                "module": "PersonRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "PersonComponent",
                        "children": [
                            {
                                "path": "add-new-person",
                                "component": "AddNewPersonComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/bills-due/bills-due.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillsDueComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/bills-due/bills-due.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BillsDueService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/bills-due/components/add-bill/add-bill.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddBillComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/bills-due/components/bills-list/bills-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/bills-due/pages/bills-management/bills-management.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillsManagementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/bills-due/pages/bills-management/bills-management.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Bill",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/cart/shopping-cart/shopping-cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingCartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/films/films-list/films-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilmsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/films/films-list/films-list.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "filmsWithFavoriteCount",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/films/films-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FilmsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/films/films.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilmsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/films/models/film.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Film",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/person/add-new-person/add-new-person.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddNewPersonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/person/person.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/person/person.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PersonService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/person/person.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "people",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/person/person.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Person",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todo/todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}